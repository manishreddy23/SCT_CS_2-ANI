from PIL import Image

class ImageEncryptor:
    def _init_(self, image_path):
        self.image = Image.open(image_path)
        self.pixels = self.image.load()

    def swap_pixels(self, swap_type):
        """
        Swap pixel values.

        Args:
            swap_type (str): 'horizontal' or 'vertical'
        """
        width, height = self.image.size
        if swap_type == 'horizontal':
            for y in range(height):
                for x in range(width // 2):
                    left_pixel = self.pixels[x, y]
                    right_pixel = self.pixels[width - x - 1, y]
                    self.pixels[x, y] = right_pixel
                    self.pixels[width - x - 1, y] = left_pixel
        elif swap_type == 'vertical':
            for x in range(width):
                for y in range(height // 2):
                    top_pixel = self.pixels[x, y]
                    bottom_pixel = self.pixels[x, height - y - 1]
                    self.pixels[x, y] = bottom_pixel
                    self.pixels[x, height - y - 1] = top_pixel

    def apply_math_operation(self, operation, value):
        """
        Apply a basic mathematical operation to each pixel.

        Args:
            operation (str): 'add', 'subtract', 'multiply', or 'divide'
            value (int): value to apply
        """
        for x in range(self.image.size[0]):
            for y in range(self.image.size[1]):
                pixel = self.pixels[x, y]
                if operation == 'add':
                    self.pixels[x, y] = tuple(min(255, max(0, c + value)) for c in pixel)
                elif operation == 'subtract':
                    self.pixels[x, y] = tuple(min(255, max(0, c - value)) for c in pixel)
                elif operation == 'multiply':
                    self.pixels[x, y] = tuple(min(255, max(0, c * value)) for c in pixel)
                elif operation == 'divide':
                    self.pixels[x, y] = tuple(min(255, max(0, c // value)) for c in pixel)

    def save_image(self, output_path):
        self.image.save(output_path)

# Example usage
encryptor = ImageEncryptor('input.png')
encryptor.swap_pixels('horizontal')
encryptor.apply_math_operation('add', 50)
encryptor.save_image('output.png')
